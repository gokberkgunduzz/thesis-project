---
- name: Check and restart Apache service with extended self-remediation steps
  hosts: all
  become: true

  vars:
    apache_config_test: apache2ctl configtest
    apache_service_name: apache2
    apache_config_path: /etc/apache2/apache2.conf
    backup_config_path: /home/gg/src/thesis-trial/ansible/backups/backup_apache2.conf
    error_log_path: /var/log/apache2/error.log
    disk_space_threshold: 90 # percent
    deny_git_access_snippet: |
      # Deny access to .git and similar directories
      <DirectoryMatch "^/.*/\.\w+/">
        Require all denied
      </DirectoryMatch>

  tasks:
    - name: Check Apache config syntax
      ansible.builtin.command: "{{ apache_config_test }}"
      register: syntax_check
      ignore_errors: true

    - name: Check disk space usage
      ansible.builtin.shell: df -hP / | awk '0+$5 >= {{ disk_space_threshold }} {print}'
      register: disk_space
      ignore_errors: true

    - name: Clear old logs if disk space is full
      ansible.builtin.shell: find /var/log/apache2/ -type f -name '*.log' -delete
      when: disk_space.stdout != ""

    - name: Correct ownership of Apache directories
      ansible.builtin.file:
        path: "{{ item }}"
        owner: www-data
        group: www-data
      with_items:
        - /var/log/apache2
        - /var/run/apache2
      when: disk_space.stdout == ""

    - name: Replace Apache config with backup if syntax is not okay
      ansible.builtin.copy:
        src: "{{ backup_config_path }}"
        dest: /etc/apache2/apache2.conf
        owner: root
        group: root
        mode: '0644'
      when: syntax_check.stdout is not search("Syntax OK")

    - name: Restart Apache2 service
      ansible.builtin.service:
        name: "{{ apache_service_name }}"
        state: restarted
      register: service_restart
      ignore_errors: true

    - name: Wait for Apache2 to come back
      ansible.builtin.wait_for:
        port: 80
        delay: 10
        timeout: 60
      when: service_restart is defined and service_restart is not failed

    - name: Retrieve Apache error log if restart failed
      ansible.builtin.shell: tail -n 50 "{{ error_log_path }}"
      register: error_log
      when: service_restart is defined and service_restart is failed

    - name: Output error log contents if restart failed
      ansible.builtin.debug:
        msg: "{{ error_log.stdout_lines }}"
      when: error_log.stdout_lines is defined and service_restart is failed

    - name: Attempt to fix .htaccess issues by removing problematic files
      ansible.builtin.shell: find /var/www/html -type f -name '.htaccess' -delete
      when:
        - error_log is defined
        - error_log.stdout is defined
        - '"htaccess" in error_log.stdout'

    - name: Deny access to .git directories
      ansible.builtin.lineinfile:
        path: "{{ apache_config_path }}"
        line: "{{ deny_git_access_snippet }}"
        insertafter: "EOF"
      register: git_access_denied
      when:
        - error_log is defined
        - error_log.stdout is defined
        - "'.git' in error_log.stdout"

    - name: Restart Apache2 service after remediation attempts
      ansible.builtin.service:
        name: "{{ apache_service_name }}"
        state: restarted
      when: git_access_denied.changed or '"htaccess" in error_log.stdout or disk_space.stdout != ""'

    - name: Final check of Apache2 status
      ansible.builtin.service:
        name: "{{ apache_service_name }}"
        state: started
      register: final_check
      failed_when: final_check.state != "running"
      when:
        - error_log is defined and error_log.stdout is defined and "htaccess" in error_log.stdout
        - disk_space is defined and disk_space.stdout != ""
